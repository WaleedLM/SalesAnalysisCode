#### Sales Analysis Project ####
#Waleed Masoud# 

import os
import pandas as pd
import matplotlib.pyplot as plt

all_data = pd.read_csv("Salesdata.csv")
all_data.head()

# Find NAN - all missing data in this dropped to clean up the data
nan_df = all_data[all_data.isna().any(axis=1)]
display(nan_df.head())

all_data = all_data.dropna(how='all')
all_data.head()

all_data['Quantity Ordered'] = pd.to_numeric(all_data['Quantity Ordered'])
all_data['Price Each'] = pd.to_numeric(all_data['Price Each'])

#Using this method to look at the start of the date in "order date" and get the number month the item was ordered 
# in order to create a new column called "month"

all_data['Month'] = all_data['Order Date'].str[0:2]
all_data['Month'] = all_data['Month'].astype('int32')
all_data.head()

#Breaking up the purchase address to get a column that only shows the city/state so that I can look at later

def get_city(address):
    return address.split(",")[1].strip(" ")

def get_state(address):
    return address.split(",")[2].split(" ")[1]

all_data['City'] = all_data['Purchase Address'].apply(lambda x: f"{get_city(x)}  ({get_state(x)})")
all_data.head()

#Getting the total sales per month 

all_data['Sales'] = all_data['Quantity Ordered'].astype('int') * all_data['Price Each'].astype('float')
all_data.groupby(['Month']).sum()


#Bar plot showing the number of sales per month

months = range(1,13)
print(months)

plt.bar(months,all_data.groupby(['Month']).sum()['Sales'])
plt.xticks(months)
plt.ylabel('Sales in USD ($)')
plt.xlabel('Month number')
plt.show()

# To get the total sales per city

all_data.groupby(['City']).sum()


#Bar plot showing the number of sales per city

keys = [city for city, df in all_data.groupby(['City'])]

plt.bar(keys,all_data.groupby(['City']).sum()['Sales'])
plt.ylabel('Sales in USD ($)')
plt.xlabel('City')
plt.xticks(keys, rotation='vertical', size=8)
plt.show()

# Add a column for "Hour" so that I can track which hour of the day the item was purchased 
#using this method to convert the hour and minute into a new column seems to be more efficient than taking the string of the order date
#In case the format of the order date time changes for some reason this ensures we can still get the correct times

all_data['Hour'] = pd.to_datetime(all_data['Order Date']).dt.hour
all_data['Minute'] = pd.to_datetime(all_data['Order Date']).dt.minute
all_data['Count'] = 1
all_data.head()

# Creating a plot that shows the number of sales for each hour

keys = [pair for pair, df in all_data.groupby(['Hour'])]

plt.plot(keys, all_data.groupby(['Hour']).count()['Count'])
plt.ylabel('Sales in USD ($)')
plt.xlabel('Hours')
plt.xticks(keys)
plt.grid()
plt.show()

#Creating a bar plot to show the quantity of each item ordered 


product_group = all_data.groupby('Product')
quantity_ordered = product_group.sum()['Quantity Ordered']

keys = [pair for pair, df in product_group]
plt.bar(keys, quantity_ordered)
plt.ylabel('Quantity Ordered')
plt.xlabel('Product')
plt.xticks(keys, rotation='vertical', size=8)
plt.show()

# Adding Secondary y axis to display the mean prices of each item ordered

prices = all_data.groupby('Product').mean()['Price Each']

fig, ax1 = plt.subplots()

ax2 = ax1.twinx()
ax1.bar(keys, quantity_ordered, color='g')
ax2.plot(keys, prices, color='b')

ax1.set_xlabel('Product Name')
ax1.set_ylabel('Quantity Ordered', color='b')
ax2.set_ylabel('Price ($)', color='g')
ax1.set_xticklabels(keys, rotation='vertical', size=8)

fig.show()




